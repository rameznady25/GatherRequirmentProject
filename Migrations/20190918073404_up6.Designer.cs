// <auto-generated />
using System;
using Gather_Requirement_Project.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gather_Requirement_Project.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20190918073404_up6")]
    partial class up6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Gather_Requirement_Project.Models.CustomerProgram", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicNameInPlural");

                    b.Property<string>("ArabicNameInSingle");

                    b.Property<string>("DevName");

                    b.Property<string>("EnglishNameInPlural");

                    b.Property<string>("EnglishNameInSingle");

                    b.Property<int?>("PortalID");

                    b.Property<string>("URLForService");

                    b.HasKey("ID");

                    b.HasIndex("PortalID");

                    b.ToTable("CustomerPrograms");
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.FieldType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("FieldTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "dropDown"
                        },
                        new
                        {
                            ID = 2,
                            Name = "number"
                        },
                        new
                        {
                            ID = 3,
                            Name = "text"
                        },
                        new
                        {
                            ID = 4,
                            Name = "email"
                        },
                        new
                        {
                            ID = 5,
                            Name = "date"
                        },
                        new
                        {
                            ID = 6,
                            Name = "checkBox"
                        },
                        new
                        {
                            ID = 7,
                            Name = "radiButton"
                        },
                        new
                        {
                            ID = 8,
                            Name = "textarea"
                        },
                        new
                        {
                            ID = 9,
                            Name = "file"
                        },
                        new
                        {
                            ID = 10,
                            Name = "button"
                        });
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.InputType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("InputTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "number"
                        },
                        new
                        {
                            ID = 2,
                            Name = "text"
                        },
                        new
                        {
                            ID = 3,
                            Name = "bool"
                        },
                        new
                        {
                            ID = 4,
                            Name = "email"
                        },
                        new
                        {
                            ID = 5,
                            Name = "date"
                        });
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.Module", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicNameInPlural");

                    b.Property<string>("ArabicNameInSingle");

                    b.Property<int>("CustomerProgramID");

                    b.Property<string>("EnglishNameInPlural");

                    b.Property<string>("EnglishNameInSingle");

                    b.Property<string>("URLForService");

                    b.HasKey("ID");

                    b.HasIndex("CustomerProgramID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.Portal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<string>("EnglishName");

                    b.HasKey("ID");

                    b.ToTable("Portal");
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.Screen", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("DevName")
                        .IsRequired();

                    b.Property<string>("EmpJob")
                        .IsRequired();

                    b.Property<string>("EmpName")
                        .IsRequired();

                    b.Property<string>("ImageName");

                    b.Property<string>("ImagePathPhysical");

                    b.Property<int>("ModuleID");

                    b.Property<string>("ScreenName")
                        .IsRequired();

                    b.Property<string>("ScreenNameArabic")
                        .IsRequired();

                    b.Property<int>("screenTypeID");

                    b.HasKey("ID");

                    b.HasIndex("ModuleID");

                    b.HasIndex("screenTypeID");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.ScreenComponent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultValue");

                    b.Property<string>("FielNameArabic");

                    b.Property<string>("FieldNameEnglish");

                    b.Property<int>("FieldTypeID");

                    b.Property<int>("InputtypeID");

                    b.Property<bool>("Readonly");

                    b.Property<int?>("ScreenComponentID");

                    b.Property<int>("ScreenID");

                    b.Property<string>("ServiceNameForDropdown");

                    b.Property<int?>("ValidationEqualID");

                    b.Property<string>("ValidationEqualMessage");

                    b.Property<int?>("ValidationGreaterthanID");

                    b.Property<string>("ValidationGreaterthanMessage");

                    b.Property<int?>("ValidationLessthanID");

                    b.Property<string>("ValidationLessthanMessage");

                    b.Property<int?>("ValidationMax");

                    b.Property<string>("ValidationMaxMessage");

                    b.Property<int?>("ValidationMin");

                    b.Property<string>("ValidationMinMessage");

                    b.Property<bool>("ValidationRequired");

                    b.Property<string>("ValidationRequiredMessage");

                    b.Property<string>("Values");

                    b.Property<bool>("Visible");

                    b.HasKey("ID");

                    b.HasIndex("FieldTypeID");

                    b.HasIndex("InputtypeID");

                    b.HasIndex("ScreenID");

                    b.ToTable("ScreenComponent");
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.ScreenType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("ScreenTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Create"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Delete"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Update"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Edit"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Search"
                        },
                        new
                        {
                            ID = 6,
                            Name = "List"
                        },
                        new
                        {
                            ID = 7,
                            Name = "View"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Setting"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Report"
                        });
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.UserStories", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Requirement");

                    b.Property<int>("ScreenID");

                    b.Property<string>("UserStory");

                    b.HasKey("ID");

                    b.HasIndex("ScreenID");

                    b.ToTable("UserStories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.CustomerProgram", b =>
                {
                    b.HasOne("Gather_Requirement_Project.Models.Portal", "Portal")
                        .WithMany("CustomerPrograms")
                        .HasForeignKey("PortalID");
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.Module", b =>
                {
                    b.HasOne("Gather_Requirement_Project.Models.CustomerProgram", "CustomerProgram")
                        .WithMany("Modules")
                        .HasForeignKey("CustomerProgramID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.Screen", b =>
                {
                    b.HasOne("Gather_Requirement_Project.Models.Module", "Module")
                        .WithMany("Screens")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gather_Requirement_Project.Models.ScreenType", "ScreenTypes")
                        .WithMany("Screens")
                        .HasForeignKey("screenTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.ScreenComponent", b =>
                {
                    b.HasOne("Gather_Requirement_Project.Models.FieldType", "FieldType")
                        .WithMany("ScreenComponents")
                        .HasForeignKey("FieldTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gather_Requirement_Project.Models.InputType", "InputType")
                        .WithMany("ScreenComponents")
                        .HasForeignKey("InputtypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gather_Requirement_Project.Models.Screen", "Screen")
                        .WithMany("ScreenComponents")
                        .HasForeignKey("ScreenID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gather_Requirement_Project.Models.UserStories", b =>
                {
                    b.HasOne("Gather_Requirement_Project.Models.Screen", "Screen")
                        .WithMany("UserStories")
                        .HasForeignKey("ScreenID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
